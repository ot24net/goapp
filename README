
目录
==================
一，项目构建
二，项目结构
三，GOPATH管理
四，变更记录

说明
==================
当前仅在debian下的测试


内容
==================
一，项目构建(复制以下单行指令即可执行)

1, 新建一个项目：
    mkdir ~/ws
    cd ~/ws/
    git config --global http.sslverify false # 只需配一次
    git clone http://git.ot24.net/go/app.git test
    cd test
    ./init.bash
    source env.bash
    cd src
    mkdir app
    cd app
    echo "package main
    import \"fmt\"
    func main(){
        fmt.Println(\"OK\")
    }
    ">main.go

    # 开发模式
    go fmt -w .
    go build #(若有翻封墙依赖，使用sup build)
    ./app

    # 完成

2, 已有的sup项目
    git clone xxx
    cd xxx
    source env.bash
    sup build all # 编程所有程序并自动下载依赖

    
二，项目结构

$GOROOT -- 编译器放在/usr/local当中，多个版本时，以go1.4，go1.5等进行放置，由项目的env.bash进行切换，此sup项目依赖于go1.8及以上版本。
$GOLIBS -- 第一级GOPATH的路径变量，作为公共库存放第三方基础库源码,通过go get来管理。
$PJROOT -- 当前项目的所在位置，与$GOLIBS同一级。
    .gitignore -- git的忽略管理文件，根据实际项目来看，许多新人会误提交，因此采用守护模式进行工作。
    env.bash -- 项目环境切换，开发时，调souce env.bash可进行项目环境切换。
    doc -- 文档文件目录。
        db -- 数据库脚本文档文件
    etc -- 静态配置文件目录,由git.ot24.net/go/engine/conf/etc进行管理调用,配置由使用者进行配置。
    res -- 动态配置文件目录，由git.ot24.net/go/engine/conf/res进行管理调用,常见用于热配置加载。
    i18n -- 多语言文件目录，由git.ot24.net/go/engine/conf/i18n进行管理调用，常用于对外多语言显示。
    log -- 日志存放目录存放发布时控制台的日志。
    publish -- 非源码部署的项目结构
    download -- 对外下载目录
    src -- 项目源码。
        -- 包名
            -- (go文件，main文件放这一层) 
            -- 包名

三，GOPATH管理

$GOPATH=$GOLIBS:$PJROOT -- $GOLIBS在第一位，以便go get安装第三方库;$PJROOT是可变的，由env.bash进行切换管理


四，发布与部署项目

1, 在部署的服务器上安装supervior工具
debian: sudo aptitude install supervisor

2, 源码部署
    # 在需要部署的服务器上下载源码库，并执行以下指令
    
    cd $PJROOT
    source env.bash
    # 编译
    sup build all
    # 部署应用
    # 项目发布管理依赖于supervisord管理，请先安装
    # debian下：sudo aptitude install supervisord
    sup install all
    # 删除部署
    sup clean all

3, 非源码部署的方式
    # 打包版本
    sup publish all
    cd $PJROOT/publish
    tar -czf $PJNAME.tar.gz $PJNAME
    # 上传到需要部署的服务器

    cd $PJROOT
    source env.bash
    # 部署应用
    # 项目发布管理依赖于supervisord管理，请先安装
    # debian下：sudo aptitude install supervisord
    sup install all
    # 删除部署
    sup clean all

5, 部署上的调试模式
进入指定的app, 执行:
    sup stop # 停止supervisor管理
    ./app # 以开发的方式启动，日志在控制台输出

6, 部署时的控制台日志查看(最多存储10M)
    sup tail [stdout] # 查看状态0的输出，等价于 supervisorctrl tail $cfg_name stdout
    sup tail stderr # 查看状态非0的输出，等价于 supervisorctrl tail $cfg_name stderr
    sup tailf [stdout] # 查看状态0的输出，等价于 supervisorctrl tail -f $cfg_name stdout
    sup tailf stderr # 查看状态非0的输出，等价于 supervisorctrl tail -f $cfg_name stderr

    # 或者进行$PJROOT/log/查看相关日志文件


其他详见sup help
以下是常用的命令(作用域为项目的相关文件):
sup status --状态查看
sup build -- 单个编译(检查依赖并go build)
sup build all -- 全部编译(检查依赖并go build)
sup install -- 单个部署安装, 安装结束后运行起程序
sup install all -- 全部部署安装, 安装运行起程序
sup clean -- 删除单个部署, 停止程序并删除发布的配置文件
sup clean all -- 删除所有部署,停止程序并删除发布的配置文件
sup publish -- 发布为非源码部署
sup publish all -- 依次发布所有编译目录下程序至非源码部署文件夹
sup start -- 单个进程启动
sup start all -- 所有进程启动
sup stop -- 单个进程停止
sup stop all -- 所有进程停止
sup restart -- 单个进程重启
sup restart all -- 所有进程重启
sup tailf -- 查看当前目录应用的日志

4, 进程管理
进入项目，执行source env.bash，使用sup命令进行管理;或者使用supervisorctl命令进行管理进程


四，变更记录

2017-06-14, sy.zhou
1, 增加非源码部署的发布指令(publish)
2, 变更说明文档

2017-05-16, sy.zhou
1，变更安装的命令

2016-12-30, sy.zhou
1，调整文档描述

2016-11-24, sy.zhou
1, 重建项目目录, 以便可以从原系统中分离出子系统

2016-07-13, sy.zhou
1，调整template的env.bash脚本位置
2，调整GOBASE环境变更为GOLIBS，以便进一步在IDE中使用

2015-10-11, sy.zhou
1, 调整etc、i18n、res目录为固定的，不再由环境变量指定。
2, 调整OTROOT为通用的命名。
3, 调整sup的配置文件命名为三级，以便同个项目中同名程序存在。

2015-10-01, sy.zhou
1,将build.bash功能并入sup命令,删除build.bash，统一使用sup命令。
2,增加单个目录编译的能力。
3,继承重写supervisorctl status功能，调用sup help时模仿pm2的界面美化了输出。
4,继承重写supervisorctl help功能,调用sup help时增加对build与clean的说明。
5,调整了部分环境变量为可导出的。

