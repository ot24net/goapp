
目录
==================
一，项目构建
二，项目结构
三，GOPATH管理
四，发布与部署项目


内容
==================
一，项目构建(复制以下单行指令即可执行)

1, 新建一个项目：
    mkdir -p ~/ws
    cd ~/ws/
    git clone https://github.com/ot24net/goapp.git test
    cd test
    ./init.bash # 输入test，输Y新建一个项目，输n保留模板原文件
    source env.bash
    cd src
    mkdir app
    cd app

    # 复制共6行进行执行构建main.go
    echo "package main
    import \"fmt\"
    func main(){
        fmt.Println(\"OK\")
    }
    ">main.go

    # 开发模式
    gofmt -w .
    go build #(若有依赖，可配置.goget自定义库地址并使用sup get拉取)
    ./app

    # 完成

2, 已有的sup项目
    mkdir -p ~/ws
    cd ~/ws/
    git clone https://github.com/ot24net/goapp.git
    cd goapp
    source env.bash
    sup get all # 下载依赖
    sup build all # 编译项目
    
二，项目结构

$GOROOT -- 编译器放在/usr/local当中，多个版本时，以go1.4，go1.5等进行放置，由项目的env.bash进行切换，此sup项目依赖于go1.9及以上版本。
$GOLIBS -- 第一级GOPATH的路径变量，作为公共库存放第三方基础库源码,通过goget来管理。
$PJROOT -- 当前项目的所在位置，与$GOLIBS同一级。
    .gitignore -- git的忽略管理文件，根据实际项目来看，许多新人会误提交，因此采用守护模式进行工作。
    .goget -- goget配置文件
    env.bash -- 项目环境变量配置，开发时，调souce env.bash可进行项目环境切换。
    log -- 日志存放目录存放发布时控制台的日志。
    publish -- 非源码部署的项目结构
    src -- 项目源码。
        -- 包名
            -- (go文件，main文件放这一层) 
            -- 包名

三，GOPATH管理

$GOPATH=$GOLIBS:$PJROOT -- $GOLIBS在第一位，以便go get安装第三方库;$PJROOT是可变的，由env.bash进行切换管理


四，发布与部署项目

1, 在部署的服务器上安装supervior工具
debian: sudo aptitude install supervisor

* 需要时可编辑env.bash的SUP_ETC_DIR目录位置, 该位置用于存放supervisord的配置文件

2, 源码部署
    # 在需要部署的服务器上下载源码库，并执行以下指令
    
    cd $PJROOT
    source env.bash
    # 检查依赖
    sup get all
    # 编译
    sup build all
    # 部署应用
    # 将supervisor的配置文件安装至$SUP_ETC_DIR目录并部署
    sup install all
    # 删除supervisor的配置文件安装至$SUP_ETC_DIR目录及部署
    sup clean all

3, 非源码部署的方式
    # 打包版本
    # 若未安装依赖，请先sup get all
    sup publish all
    cd $PJROOT/publish
    tar -czf $PJNAME.tar.gz $PJNAME
    # 上传到需要部署的服务器

    cd $PJROOT
    source env.bash
    # 部署应用
    # 将supervisor的配置文件安装至$SUP_ETC_DIR目录并部署
    sup install all
    # 删除supervisor的配置文件安装至$SUP_ETC_DIR目录及部署
    sup clean all

5, 部署上的调试模式
进入指定的app, 执行:
    sup stop # 停止supervisor管理
    ./app # 以开发的方式启动，日志在控制台输出

6, 部署时的控制台日志查看
    sup tail [$cfg_name stdout] # 查看输出状态0的输出，等价于 sudo supervisorctrl tail $cfg_name stdout
    sup tail $cfg_name stderr # 查看输出状态非0的输出，等价于 sudo supervisorctrl tail $cfg_name stderr
    sup tailf [$cfg_name stdout] # 查看输出状态0的输出，等价于 sudo supervisorctrl tail -f $cfg_name stdout
    sup tailf $cfg_name stderr # 查看输出状态非0的输出，等价于 sudo supervisorctrl tail -f $cfg_name stderr

    # 或者进入$PJROOT/log/ 用系统的tail命令查看相关日志文件


其他详见sup help
详情参考https://github.com/ot24net/sup

4, 管理发布进程
进入项目根目录，执行source env.bash，使用sup命令进行管理；或者使用supervisorctl命令进行管理进程

